datasource db {
 provider = "postgresql"
 url      = env("POSTGRES_DEV")
}

generator client {
 provider = "prisma-client-js"
}

model User {
 id           Int       @id @default(autoincrement())
 email        String    @unique
 hash         String
 first_name   String?
 last_name    String?
 verified     Boolean   @default(false)
 role         String    @default("user")
 subscription String?
 is_active    Boolean?
 createdAt    DateTime  @default(now())
 updated_at   DateTime? @updatedAt
 deleted_at   DateTime?

 // Relations
 // auth        Auth?
 preferences UserPreferences?
 apiKey      ApiKey?
}

enum Role {
 User
 Admin
 Owner
}

model Auth {
 email              String   @id // Changed to @id to represent 1:1 relationship with User
 hash               String
 otp                String
 retries            Int      @default(0)
 refreshToken       String?
 resetToken         String?
 lastPasswordChange String?
 createdAt          DateTime @default(now())
 expiresAt          DateTime

 // Relation back to User
 // user   User @relation(fields: [userId], references: [id])
 userId Int
}

model UserPreferences {
 // id
 email               String  @id
 theme               String  @default("light")
 language            String?
 email_notifications Boolean @default(true)
 sms_notifications   Boolean @default(false)

 // Relation back to User
 user User @relation(fields: [email], references: [email])
}

enum RenewalPeriods {
 monthly // 30 days
 yearly // 365 days
}

model UserSubscriptions {
 // id
 email            String  @id
 type             String? // "free"
 creditsUsed      String?
 creditsRemaining String?
 startDate String?
 endDate  String?
 renewalDate String?
 price            String?
 currency String?
 frequency RenewalPeriods?
 status Boolean?
 category String?

}

model UserPayments {
 paymentMethod      String    @id
 amount             String?
 paymentDate        DateTime?
 billingAddress     String?
 cardLastFourDigits String?
 default            Boolean?
 createdAt          DateTime?
 updatedAt          DateTime?
}

model ApiKey {
 email     String   @id
 api_key   String   @default(uuid())
 createdAt DateTime @default(now())

 // Relation back to User
 user User @relation(fields: [email], references: [email])
}

model Blog {
 id        Int      @id @default(autoincrement())
 title     String   @unique
 tagline   String
 tags      String
 author    String   @default("Admin") // Point this to the owner's or content writer's name
 image     String   @default("https://source.unsplash.com/random") // Point this to a default image from the public directory or upload to cloudinary/S3 and use that link
 content   String // Markdown content
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

 // Relation back to User
 // user User @relation(fields: [email], references: [email])
}
